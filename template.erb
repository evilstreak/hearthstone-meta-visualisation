<!DOCTYPE html>
<html>
<head>
  <title>Hearthstone meta matchups visualisation</title>
  <style type="text/css">
    body {
      font: 12px/18px "Helvetica Neue", Helvetica, sans-serif;
      padding: 40px 30px 10px 10px;
    }

    table {
      border-collapse: collapse;
      table-layout: fixed;
      width: 100%;
    }

    th {
      font-weight: normal;
    }

    thead th {
      font-size: 8px;
      line-height: 12px;
      text-align: left;
      white-space: nowrap;

      transform: translate(-50%) rotate(315deg) translate(100%);
      transform-origin: bottom right;
    }

    thead th:first-child {
      width: 115px;
      transform: none;
    }

    thead th:nth-child(2) {
      transform: none;
      width: 45px;
    }

    tbody th {
      padding: 2px;
      text-align: left;
    }

    td {
      border: 1px solid #fff;
      color: transparent;
      cursor: default;
      padding: 0;
      text-align: center;
      width: 30px;
    }

    th + td {
      color: #000;
      text-align: left;
    }

    td:hover {
      color: #000;
    }
  </style>
</head>
<body>
<div id="visualisation">
  <table>
    <thead>
      <tr>
        <th>Deck</th>
        <th>Win rate</th>
        <% for deck in @decks.select { |d| d.frequency > 0.009 } %>
          <th width="<%= deck.frequency * 100 %>%">
            vs <%= deck.name %>
          </th>
        <% end %>
      </tr>
    </thead>
    <tbody>
      <% for deck in @decks.sort_by(&:win_rate).reverse %>
        <tr>
          <th><%= deck.name %></th>
          <td><%= (deck.win_rate * 100).round(3) %>%</td>
          <% for opponent in @decks.select { |d| d.frequency > 0.009 } %>
            <td style="background-color: <%= deck.matchup(opponent.name).colour %>;">
              <%= deck.matchup(opponent.name).win_rate %>
            </td>
          <% end %>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<script type="text/javascript" src="js/react-with-addons-15.2.0.js"></script>
<script type="text/javascript" src="js/react-dom-15.2.0.js"></script>
<script type="text/javascript">
var Visualisation = React.createClass({
  displayName: "Visualisation",
  render: function() {
    return React.createElement(
      "table",
      null,
      React.createElement(
        TableHead,
        { decks: this.props.data.decks }
      ),
      React.createElement(
        TableBody,
        { decks: this.props.data.decks }
      )
    );
  }
});

var TableHead = React.createClass({
  displayName: "TableHead",
  render: function() {
    return React.createElement(
      "thead",
      null,
      React.createElement(
        "tr",
        null,
        React.createElement("th", { key: "deck-name" }, "Deck"),
        React.createElement("th", { key: "deck-win-rate" }, "Win rate"),
        this.deckHeadings()
      )
    );
  },
  deckHeadings: function() {
    return this.props.decks.map(function(deck) {
      return React.createElement(
        "th",
        {
          key: deck.name
        },
        "vs " + deck.name
      );
    });
  }
});

var TableBody = React.createClass({
  displayName: "TableBody",
  render: function() {
    return React.createElement(
      "tbody",
      null,
      this.rows()
    );
  },
  rows: function() {
    return this.props.decks.map(function(deck) {
      return React.createElement(
        TableRow,
        {
          deck: deck,
          key: deck.name
        }
      );
    });
  }
});

var TableRow = React.createClass({
  displayName: "TableRow",
  render: function() {
    return React.createElement(
      "tr",
      null,
      React.createElement("th", { key: "name" }, this.props.deck.name),
      React.createElement("td", { key: "win_rate" }, this.winRate()),
      this.matchups()
    );
  },
  matchups: function() {
    return this.props.deck.matchups.map(function(matchup) {
      return React.createElement(
        Matchup,
        {
          key: matchup.opponent,
          matchup: matchup
        }
      );
    });
  },
  winRate: function() {
    return (this.props.deck.win_rate * 100).toFixed(1) + "%";
  }
});

var Matchup = React.createClass({
  render: function() {
    return React.createElement(
      "td",
      { style: { backgroundColor: this.colour() } },
      this.winRate()
    );
  },
  winRate: function() {
    return (this.props.matchup.win_rate * 100).toFixed(1) + "%";
  },
  colour: function() {
    return "rgba(" +
      this.colourR() + ", " +
      this.colourG() + ", " +
      this.colourB() + ", " +
      this.colourA() +
    ")";
  },
  colourR: function() {
    return Math.floor(
      Math.max(
        0,
        Math.min(
          255,
          (1 - this.props.matchup.win_rate) * 255 * 4 - 255
        )
      )
    );
  },
  colourG: function() {
    return Math.floor(
      Math.max(
        0,
        Math.min(
          255,
          this.props.matchup.win_rate * 255 * 4 - 255
        )
      )
    );
  },
  colourB: function() {
    return 0;
  },
  colourA: function() {
    return Math.max(
      this.props.matchup.win_rate,
      1 - this.props.matchup.win_rate
    ) * Math.max(
      0,
      Math.min(
        1,
        (this.props.matchup.games_played - 50) * 0.02
      )
    );
  }
});

ReactDOM.render(
  React.createElement(Visualisation, { data: <%= @raw_json %> }),
  document.getElementById("visualisation")
);
</script>
</body>
</html>
